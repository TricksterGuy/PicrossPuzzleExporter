// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Picross.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Picross_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Picross_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Picross_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Picross_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Picross_2eproto;
class PicrossPuzzle;
class PicrossPuzzleDefaultTypeInternal;
extern PicrossPuzzleDefaultTypeInternal _PicrossPuzzle_default_instance_;
class Solution;
class SolutionDefaultTypeInternal;
extern SolutionDefaultTypeInternal _Solution_default_instance_;
class SolutionLayer;
class SolutionLayerDefaultTypeInternal;
extern SolutionLayerDefaultTypeInternal _SolutionLayer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PicrossPuzzle* Arena::CreateMaybeMessage<::PicrossPuzzle>(Arena*);
template<> ::Solution* Arena::CreateMaybeMessage<::Solution>(Arena*);
template<> ::SolutionLayer* Arena::CreateMaybeMessage<::SolutionLayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Type : int {
  TYPE_INVALID = 0,
  TYPE_BW = 1,
  TYPE_GRAY = 2,
  TYPE_RGB = 3,
  TYPE_RBY = 4,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_INVALID;
constexpr Type Type_MAX = TYPE_RBY;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Solution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Solution) */ {
 public:
  inline Solution() : Solution(nullptr) {};
  virtual ~Solution();

  Solution(const Solution& from);
  Solution(Solution&& from) noexcept
    : Solution() {
    *this = ::std::move(from);
  }

  inline Solution& operator=(const Solution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Solution& operator=(Solution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Solution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Solution* internal_default_instance() {
    return reinterpret_cast<const Solution*>(
               &_Solution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Solution& a, Solution& b) {
    a.Swap(&b);
  }
  inline void Swap(Solution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Solution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Solution* New() const final {
    return CreateMaybeMessage<Solution>(nullptr);
  }

  Solution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Solution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Solution& from);
  void MergeFrom(const Solution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Solution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Solution";
  }
  protected:
  explicit Solution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Picross_2eproto);
    return ::descriptor_table_Picross_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // repeated int32 data = 1 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Solution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Picross_2eproto;
};
// -------------------------------------------------------------------

class SolutionLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolutionLayer) */ {
 public:
  inline SolutionLayer() : SolutionLayer(nullptr) {};
  virtual ~SolutionLayer();

  SolutionLayer(const SolutionLayer& from);
  SolutionLayer(SolutionLayer&& from) noexcept
    : SolutionLayer() {
    *this = ::std::move(from);
  }

  inline SolutionLayer& operator=(const SolutionLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolutionLayer& operator=(SolutionLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolutionLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolutionLayer* internal_default_instance() {
    return reinterpret_cast<const SolutionLayer*>(
               &_SolutionLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SolutionLayer& a, SolutionLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SolutionLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolutionLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolutionLayer* New() const final {
    return CreateMaybeMessage<SolutionLayer>(nullptr);
  }

  SolutionLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolutionLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolutionLayer& from);
  void MergeFrom(const SolutionLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolutionLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolutionLayer";
  }
  protected:
  explicit SolutionLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Picross_2eproto);
    return ::descriptor_table_Picross_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated .Solution rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::Solution* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >*
      mutable_rows();
  private:
  const ::Solution& _internal_rows(int index) const;
  ::Solution* _internal_add_rows();
  public:
  const ::Solution& rows(int index) const;
  ::Solution* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >&
      rows() const;

  // repeated .Solution cols = 2;
  int cols_size() const;
  private:
  int _internal_cols_size() const;
  public:
  void clear_cols();
  ::Solution* mutable_cols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >*
      mutable_cols();
  private:
  const ::Solution& _internal_cols(int index) const;
  ::Solution* _internal_add_cols();
  public:
  const ::Solution& cols(int index) const;
  ::Solution* add_cols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >&
      cols() const;

  // @@protoc_insertion_point(class_scope:SolutionLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution > rows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution > cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Picross_2eproto;
};
// -------------------------------------------------------------------

class PicrossPuzzle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicrossPuzzle) */ {
 public:
  inline PicrossPuzzle() : PicrossPuzzle(nullptr) {};
  virtual ~PicrossPuzzle();

  PicrossPuzzle(const PicrossPuzzle& from);
  PicrossPuzzle(PicrossPuzzle&& from) noexcept
    : PicrossPuzzle() {
    *this = ::std::move(from);
  }

  inline PicrossPuzzle& operator=(const PicrossPuzzle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PicrossPuzzle& operator=(PicrossPuzzle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PicrossPuzzle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PicrossPuzzle* internal_default_instance() {
    return reinterpret_cast<const PicrossPuzzle*>(
               &_PicrossPuzzle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PicrossPuzzle& a, PicrossPuzzle& b) {
    a.Swap(&b);
  }
  inline void Swap(PicrossPuzzle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PicrossPuzzle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PicrossPuzzle* New() const final {
    return CreateMaybeMessage<PicrossPuzzle>(nullptr);
  }

  PicrossPuzzle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PicrossPuzzle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PicrossPuzzle& from);
  void MergeFrom(const PicrossPuzzle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PicrossPuzzle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicrossPuzzle";
  }
  protected:
  explicit PicrossPuzzle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Picross_2eproto);
    return ::descriptor_table_Picross_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kLayersFieldNumber = 6,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kTypeFieldNumber = 3,
    kBpcFieldNumber = 4,
  };
  // repeated int32 data = 5 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // repeated .SolutionLayer layers = 6;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::SolutionLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolutionLayer >*
      mutable_layers();
  private:
  const ::SolutionLayer& _internal_layers(int index) const;
  ::SolutionLayer* _internal_add_layers();
  public:
  const ::SolutionLayer& layers(int index) const;
  ::SolutionLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolutionLayer >&
      layers() const;

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Type type = 3;
  void clear_type();
  ::Type type() const;
  void set_type(::Type value);
  private:
  ::Type _internal_type() const;
  void _internal_set_type(::Type value);
  public:

  // int32 bpc = 4;
  void clear_bpc();
  ::PROTOBUF_NAMESPACE_ID::int32 bpc() const;
  void set_bpc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bpc() const;
  void _internal_set_bpc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PicrossPuzzle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolutionLayer > layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 bpc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Picross_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Solution

// repeated int32 data = 1 [packed = true];
inline int Solution::_internal_data_size() const {
  return data_.size();
}
inline int Solution::data_size() const {
  return _internal_data_size();
}
inline void Solution::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Solution::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Solution::data(int index) const {
  // @@protoc_insertion_point(field_get:Solution.data)
  return _internal_data(index);
}
inline void Solution::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Solution.data)
}
inline void Solution::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void Solution::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:Solution.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Solution::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Solution::data() const {
  // @@protoc_insertion_point(field_list:Solution.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Solution::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Solution::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Solution.data)
  return _internal_mutable_data();
}

// int32 total = 2;
inline void Solution::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Solution::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Solution::total() const {
  // @@protoc_insertion_point(field_get:Solution.total)
  return _internal_total();
}
inline void Solution::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void Solution::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:Solution.total)
}

// -------------------------------------------------------------------

// SolutionLayer

// repeated .Solution rows = 1;
inline int SolutionLayer::_internal_rows_size() const {
  return rows_.size();
}
inline int SolutionLayer::rows_size() const {
  return _internal_rows_size();
}
inline void SolutionLayer::clear_rows() {
  rows_.Clear();
}
inline ::Solution* SolutionLayer::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:SolutionLayer.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >*
SolutionLayer::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:SolutionLayer.rows)
  return &rows_;
}
inline const ::Solution& SolutionLayer::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::Solution& SolutionLayer::rows(int index) const {
  // @@protoc_insertion_point(field_get:SolutionLayer.rows)
  return _internal_rows(index);
}
inline ::Solution* SolutionLayer::_internal_add_rows() {
  return rows_.Add();
}
inline ::Solution* SolutionLayer::add_rows() {
  // @@protoc_insertion_point(field_add:SolutionLayer.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >&
SolutionLayer::rows() const {
  // @@protoc_insertion_point(field_list:SolutionLayer.rows)
  return rows_;
}

// repeated .Solution cols = 2;
inline int SolutionLayer::_internal_cols_size() const {
  return cols_.size();
}
inline int SolutionLayer::cols_size() const {
  return _internal_cols_size();
}
inline void SolutionLayer::clear_cols() {
  cols_.Clear();
}
inline ::Solution* SolutionLayer::mutable_cols(int index) {
  // @@protoc_insertion_point(field_mutable:SolutionLayer.cols)
  return cols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >*
SolutionLayer::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:SolutionLayer.cols)
  return &cols_;
}
inline const ::Solution& SolutionLayer::_internal_cols(int index) const {
  return cols_.Get(index);
}
inline const ::Solution& SolutionLayer::cols(int index) const {
  // @@protoc_insertion_point(field_get:SolutionLayer.cols)
  return _internal_cols(index);
}
inline ::Solution* SolutionLayer::_internal_add_cols() {
  return cols_.Add();
}
inline ::Solution* SolutionLayer::add_cols() {
  // @@protoc_insertion_point(field_add:SolutionLayer.cols)
  return _internal_add_cols();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Solution >&
SolutionLayer::cols() const {
  // @@protoc_insertion_point(field_list:SolutionLayer.cols)
  return cols_;
}

// -------------------------------------------------------------------

// PicrossPuzzle

// int32 width = 1;
inline void PicrossPuzzle::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::width() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.width)
  return _internal_width();
}
inline void PicrossPuzzle::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void PicrossPuzzle::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PicrossPuzzle.width)
}

// int32 height = 2;
inline void PicrossPuzzle::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::height() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.height)
  return _internal_height();
}
inline void PicrossPuzzle::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void PicrossPuzzle::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PicrossPuzzle.height)
}

// .Type type = 3;
inline void PicrossPuzzle::clear_type() {
  type_ = 0;
}
inline ::Type PicrossPuzzle::_internal_type() const {
  return static_cast< ::Type >(type_);
}
inline ::Type PicrossPuzzle::type() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.type)
  return _internal_type();
}
inline void PicrossPuzzle::_internal_set_type(::Type value) {
  
  type_ = value;
}
inline void PicrossPuzzle::set_type(::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PicrossPuzzle.type)
}

// int32 bpc = 4;
inline void PicrossPuzzle::clear_bpc() {
  bpc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::_internal_bpc() const {
  return bpc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::bpc() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.bpc)
  return _internal_bpc();
}
inline void PicrossPuzzle::_internal_set_bpc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bpc_ = value;
}
inline void PicrossPuzzle::set_bpc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bpc(value);
  // @@protoc_insertion_point(field_set:PicrossPuzzle.bpc)
}

// repeated int32 data = 5 [packed = true];
inline int PicrossPuzzle::_internal_data_size() const {
  return data_.size();
}
inline int PicrossPuzzle::data_size() const {
  return _internal_data_size();
}
inline void PicrossPuzzle::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PicrossPuzzle::data(int index) const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.data)
  return _internal_data(index);
}
inline void PicrossPuzzle::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicrossPuzzle.data)
}
inline void PicrossPuzzle::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void PicrossPuzzle::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:PicrossPuzzle.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PicrossPuzzle::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PicrossPuzzle::data() const {
  // @@protoc_insertion_point(field_list:PicrossPuzzle.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PicrossPuzzle::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PicrossPuzzle::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PicrossPuzzle.data)
  return _internal_mutable_data();
}

// repeated .SolutionLayer layers = 6;
inline int PicrossPuzzle::_internal_layers_size() const {
  return layers_.size();
}
inline int PicrossPuzzle::layers_size() const {
  return _internal_layers_size();
}
inline void PicrossPuzzle::clear_layers() {
  layers_.Clear();
}
inline ::SolutionLayer* PicrossPuzzle::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:PicrossPuzzle.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolutionLayer >*
PicrossPuzzle::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:PicrossPuzzle.layers)
  return &layers_;
}
inline const ::SolutionLayer& PicrossPuzzle::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::SolutionLayer& PicrossPuzzle::layers(int index) const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.layers)
  return _internal_layers(index);
}
inline ::SolutionLayer* PicrossPuzzle::_internal_add_layers() {
  return layers_.Add();
}
inline ::SolutionLayer* PicrossPuzzle::add_layers() {
  // @@protoc_insertion_point(field_add:PicrossPuzzle.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolutionLayer >&
PicrossPuzzle::layers() const {
  // @@protoc_insertion_point(field_list:PicrossPuzzle.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Type>() {
  return ::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Picross_2eproto
