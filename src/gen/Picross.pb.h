// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Picross.proto

#ifndef PROTOBUF_Picross_2eproto__INCLUDED
#define PROTOBUF_Picross_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Picross_2eproto();
void protobuf_AssignDesc_Picross_2eproto();
void protobuf_ShutdownFile_Picross_2eproto();

class Solution;
class SolutionLayer;
class PicrossPuzzle;

enum Type {
  TYPE_BW = 0,
  TYPE_GRAY = 1,
  TYPE_RGB = 2,
  TYPE_RBY = 3
};
bool Type_IsValid(int value);
const Type Type_MIN = TYPE_BW;
const Type Type_MAX = TYPE_RBY;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Solution : public ::google::protobuf::Message {
 public:
  Solution();
  virtual ~Solution();

  Solution(const Solution& from);

  inline Solution& operator=(const Solution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Solution& default_instance();

  void Swap(Solution* other);

  // implements Message ----------------------------------------------

  Solution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Solution& from);
  void MergeFrom(const Solution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 data = 1 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // optional int32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Solution)
 private:
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::int32 total_;
  friend void  protobuf_AddDesc_Picross_2eproto();
  friend void protobuf_AssignDesc_Picross_2eproto();
  friend void protobuf_ShutdownFile_Picross_2eproto();

  void InitAsDefaultInstance();
  static Solution* default_instance_;
};
// -------------------------------------------------------------------

class SolutionLayer : public ::google::protobuf::Message {
 public:
  SolutionLayer();
  virtual ~SolutionLayer();

  SolutionLayer(const SolutionLayer& from);

  inline SolutionLayer& operator=(const SolutionLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolutionLayer& default_instance();

  void Swap(SolutionLayer* other);

  // implements Message ----------------------------------------------

  SolutionLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolutionLayer& from);
  void MergeFrom(const SolutionLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Solution rows = 1;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline const ::Solution& rows(int index) const;
  inline ::Solution* mutable_rows(int index);
  inline ::Solution* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::Solution >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::Solution >*
      mutable_rows();

  // repeated .Solution cols = 2;
  inline int cols_size() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 2;
  inline const ::Solution& cols(int index) const;
  inline ::Solution* mutable_cols(int index);
  inline ::Solution* add_cols();
  inline const ::google::protobuf::RepeatedPtrField< ::Solution >&
      cols() const;
  inline ::google::protobuf::RepeatedPtrField< ::Solution >*
      mutable_cols();

  // @@protoc_insertion_point(class_scope:SolutionLayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Solution > rows_;
  ::google::protobuf::RepeatedPtrField< ::Solution > cols_;
  friend void  protobuf_AddDesc_Picross_2eproto();
  friend void protobuf_AssignDesc_Picross_2eproto();
  friend void protobuf_ShutdownFile_Picross_2eproto();

  void InitAsDefaultInstance();
  static SolutionLayer* default_instance_;
};
// -------------------------------------------------------------------

class PicrossPuzzle : public ::google::protobuf::Message {
 public:
  PicrossPuzzle();
  virtual ~PicrossPuzzle();

  PicrossPuzzle(const PicrossPuzzle& from);

  inline PicrossPuzzle& operator=(const PicrossPuzzle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PicrossPuzzle& default_instance();

  void Swap(PicrossPuzzle* other);

  // implements Message ----------------------------------------------

  PicrossPuzzle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PicrossPuzzle& from);
  void MergeFrom(const PicrossPuzzle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required .Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Type type() const;
  inline void set_type(::Type value);

  // required int32 bpc = 4;
  inline bool has_bpc() const;
  inline void clear_bpc();
  static const int kBpcFieldNumber = 4;
  inline ::google::protobuf::int32 bpc() const;
  inline void set_bpc(::google::protobuf::int32 value);

  // repeated int32 data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // repeated .SolutionLayer layers = 6;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 6;
  inline const ::SolutionLayer& layers(int index) const;
  inline ::SolutionLayer* mutable_layers(int index);
  inline ::SolutionLayer* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::SolutionLayer >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::SolutionLayer >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:PicrossPuzzle)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bpc();
  inline void clear_has_bpc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  int type_;
  ::google::protobuf::int32 bpc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::SolutionLayer > layers_;
  friend void  protobuf_AddDesc_Picross_2eproto();
  friend void protobuf_AssignDesc_Picross_2eproto();
  friend void protobuf_ShutdownFile_Picross_2eproto();

  void InitAsDefaultInstance();
  static PicrossPuzzle* default_instance_;
};
// ===================================================================


// ===================================================================

// Solution

// repeated int32 data = 1 [packed = true];
inline int Solution::data_size() const {
  return data_.size();
}
inline void Solution::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 Solution::data(int index) const {
  // @@protoc_insertion_point(field_get:Solution.data)
  return data_.Get(index);
}
inline void Solution::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Solution.data)
}
inline void Solution::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Solution.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Solution::data() const {
  // @@protoc_insertion_point(field_list:Solution.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Solution::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Solution.data)
  return &data_;
}

// optional int32 total = 2;
inline bool Solution::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Solution::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Solution::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Solution::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Solution::total() const {
  // @@protoc_insertion_point(field_get:Solution.total)
  return total_;
}
inline void Solution::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:Solution.total)
}

// -------------------------------------------------------------------

// SolutionLayer

// repeated .Solution rows = 1;
inline int SolutionLayer::rows_size() const {
  return rows_.size();
}
inline void SolutionLayer::clear_rows() {
  rows_.Clear();
}
inline const ::Solution& SolutionLayer::rows(int index) const {
  // @@protoc_insertion_point(field_get:SolutionLayer.rows)
  return rows_.Get(index);
}
inline ::Solution* SolutionLayer::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:SolutionLayer.rows)
  return rows_.Mutable(index);
}
inline ::Solution* SolutionLayer::add_rows() {
  // @@protoc_insertion_point(field_add:SolutionLayer.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Solution >&
SolutionLayer::rows() const {
  // @@protoc_insertion_point(field_list:SolutionLayer.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::Solution >*
SolutionLayer::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:SolutionLayer.rows)
  return &rows_;
}

// repeated .Solution cols = 2;
inline int SolutionLayer::cols_size() const {
  return cols_.size();
}
inline void SolutionLayer::clear_cols() {
  cols_.Clear();
}
inline const ::Solution& SolutionLayer::cols(int index) const {
  // @@protoc_insertion_point(field_get:SolutionLayer.cols)
  return cols_.Get(index);
}
inline ::Solution* SolutionLayer::mutable_cols(int index) {
  // @@protoc_insertion_point(field_mutable:SolutionLayer.cols)
  return cols_.Mutable(index);
}
inline ::Solution* SolutionLayer::add_cols() {
  // @@protoc_insertion_point(field_add:SolutionLayer.cols)
  return cols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Solution >&
SolutionLayer::cols() const {
  // @@protoc_insertion_point(field_list:SolutionLayer.cols)
  return cols_;
}
inline ::google::protobuf::RepeatedPtrField< ::Solution >*
SolutionLayer::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:SolutionLayer.cols)
  return &cols_;
}

// -------------------------------------------------------------------

// PicrossPuzzle

// required int32 width = 1;
inline bool PicrossPuzzle::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PicrossPuzzle::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PicrossPuzzle::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PicrossPuzzle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 PicrossPuzzle::width() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.width)
  return width_;
}
inline void PicrossPuzzle::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:PicrossPuzzle.width)
}

// required int32 height = 2;
inline bool PicrossPuzzle::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PicrossPuzzle::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PicrossPuzzle::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PicrossPuzzle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 PicrossPuzzle::height() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.height)
  return height_;
}
inline void PicrossPuzzle::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:PicrossPuzzle.height)
}

// required .Type type = 3;
inline bool PicrossPuzzle::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PicrossPuzzle::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PicrossPuzzle::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PicrossPuzzle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Type PicrossPuzzle::type() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.type)
  return static_cast< ::Type >(type_);
}
inline void PicrossPuzzle::set_type(::Type value) {
  assert(::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PicrossPuzzle.type)
}

// required int32 bpc = 4;
inline bool PicrossPuzzle::has_bpc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PicrossPuzzle::set_has_bpc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PicrossPuzzle::clear_has_bpc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PicrossPuzzle::clear_bpc() {
  bpc_ = 0;
  clear_has_bpc();
}
inline ::google::protobuf::int32 PicrossPuzzle::bpc() const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.bpc)
  return bpc_;
}
inline void PicrossPuzzle::set_bpc(::google::protobuf::int32 value) {
  set_has_bpc();
  bpc_ = value;
  // @@protoc_insertion_point(field_set:PicrossPuzzle.bpc)
}

// repeated int32 data = 5 [packed = true];
inline int PicrossPuzzle::data_size() const {
  return data_.size();
}
inline void PicrossPuzzle::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 PicrossPuzzle::data(int index) const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.data)
  return data_.Get(index);
}
inline void PicrossPuzzle::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicrossPuzzle.data)
}
inline void PicrossPuzzle::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:PicrossPuzzle.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PicrossPuzzle::data() const {
  // @@protoc_insertion_point(field_list:PicrossPuzzle.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PicrossPuzzle::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PicrossPuzzle.data)
  return &data_;
}

// repeated .SolutionLayer layers = 6;
inline int PicrossPuzzle::layers_size() const {
  return layers_.size();
}
inline void PicrossPuzzle::clear_layers() {
  layers_.Clear();
}
inline const ::SolutionLayer& PicrossPuzzle::layers(int index) const {
  // @@protoc_insertion_point(field_get:PicrossPuzzle.layers)
  return layers_.Get(index);
}
inline ::SolutionLayer* PicrossPuzzle::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:PicrossPuzzle.layers)
  return layers_.Mutable(index);
}
inline ::SolutionLayer* PicrossPuzzle::add_layers() {
  // @@protoc_insertion_point(field_add:PicrossPuzzle.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SolutionLayer >&
PicrossPuzzle::layers() const {
  // @@protoc_insertion_point(field_list:PicrossPuzzle.layers)
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::SolutionLayer >*
PicrossPuzzle::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:PicrossPuzzle.layers)
  return &layers_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Type>() {
  return ::Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Picross_2eproto__INCLUDED
