syntax = "proto3";

// Depend on protobuf-lite as it is much smaller in space.
// Don't need descriptors or reflection.
option optimize_for = LITE_RUNTIME;

// Solution info for a row column.
// This message represents the numbers along the top/left of the picross.
// Additionally fields for special picross that involve multiple bits per cell.
message Hint
{
    // Hints along this particular row/column.
	repeated int32 data = 1 [packed=true];
	// Frequency of each possible number in row/column for bpc > 1.
	repeated int32 totals = 2  [packed=true];
	// Number of shade changes for this particular row/column.
	int32 shading = 3;
}

// Solution Info for a picross puzzle (or an individual layer for colored picross).
message HintLayer
{
	repeated Hint rows = 1;
	repeated Hint columns = 2;
}

// Background info for picross games.
// Includes a background image or gradient and theme music.
message BackgroundInfo
{
	enum Type
	{
		TYPE_INVALID = 0;
		// Stationary image.
		TYPE_STATIONARY = 1;
		// Image stretched to fit viewport.
		TYPE_STRETCHED = 2;
		// Tile image across viewport.
		TYPE_TILED = 3;
		// Gradient background.
		TYPE_GRADIENT = 4;
	}
	// Image filename.
	string image = 1;
	// Type of background.
	Type type = 2;
	// For TYPE_GRADIENT the top and bottom colors for gradient.
	uint32 color1 = 3;
	uint32 color2 = 4;
	// Music filename.
	string music = 5;
}

// Metadata for solution
message SolutionMeta
{
    // Resulting image filename.
	string image = 1;
	// Number of frames in animation if image is animated.
	int32 frames = 2;
}

// Metadata for Picross Puzzle.
message PicrossPuzzleMeta
{
    // Name of the puzzle.
	string name = 1;
	// Author of the puzzle.
	string author = 2;
	// Amount of time to solve puzzle.
	int32 time = 3;
	// Background image/music info.
	BackgroundInfo background = 4;
	// Metadata for solution.
	SolutionMeta solution = 5;
}

// Message for Picross Puzzle.
message PicrossPuzzle
{
	enum Type
	{
		TYPE_INVALID = 0;
		// Classic Picross. One layer black.
		TYPE_BW = 1;
		// Grayscale Picross. One layer.
		TYPE_GRAY = 2;
		// Light Picross. Three layers Red, Green, and Blue.
		TYPE_RGB = 3;
		// Painting Picross. Five layers Black, White, Red, Blue, and Yellow.
		TYPE_RBY = 4;
	}
	// Dimensions of the puzzle in cells.
	int32 width = 1;
	int32 height = 2;
	// Type of Picross Puzzle.
	Type type = 3;
	// Bits per cell for picross puzzle. Valid only for TYPE_GRAY and TYPE_RGB.
	int32 bpc = 4;
	// The state of the board for the puzzle, it is packed data based on the content of each layer.
	repeated int32 solution = 5 [packed=true];
	// Row/Column hints for each layer of the picross puzzle.
	repeated HintLayer layers = 6;
	// Metadata.
	PicrossPuzzleMeta meta = 7;
}
